module results

import controls

/// A witness for controls.Monad for results.Result.
/// In contrast to failureMonad, implemented to map Success values.
let successMonad = controls.Monad pureSuccess, flatMapSuccess

/// Creates a pure succcess value.
func pureSuccess { value =>
    Success value
}

/// When successful, attempts another operation by transforming the result.
func flatMapSuccess { transform, result =>
    with result, type Result {
        Success: { success => transform success.value },
        Failure: { failure => failure }
    }
}


/// A witness for controls.Monad for results.Result.
/// In contrast to successMonad, implemented to map Failure errors.
let failureMonad = controls.Monad pureFailure, flatMapFailure

/// Creates a pure failure value.
func pureFailure { error =>
    Failure error
}

/// When failed, attempts another operation by transforming the error.
func flatMapFailure { transform, result =>
    with result, type Result {
        Success: { success => success },
        Failure: { failure => transform failure.error }
    }
}

/// The default witness for controls.Monad for results.Result.
/// Is equal to successMonad.
let monad = successMonad
/// The default flatMap for results.Result.
/// Is equal to flatMapSuccess.
let flatMap = flatMapSuccess
