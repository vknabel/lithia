/// Defines comparision operations, ascending and descending of values.
module cmp

/// Instances compare values regarding the order.
/// Witnesses are typically only defined for specific types.
data Comparable {
    /// Compares two values.
    /// @returns Order
    compare lhs, rhs
}

/// Represents the order of two values.
enum Order {
    /// Indicates an ascending order of two values.
    /// For example 1 and 2.
    data Ascending
    /// Both values are ordered equally.
    /// In context of Order, it doesn't necessarily require equality.
    data Equal
    /// Indicates an descending order of two values.
    /// For example 2 and 1.
    data Descending
}

import tests { test }

test "cmp.Comparable can be constructed", { fail =>
    let alwaysEqual = Comparable { lhs, rhs => Equal }
    when (alwaysEqual.compare 1, 2) != Equal, fail "behavior of comparable changed"
}

test "cmp.Ascending is cmp.Order", { fail =>
    with Ascending, type Order {
        Ascending: { _ => /* succeed */ },
        Any: { unexpected => fail unexpected }
    }
}

test "cmp.Equal is cmp.Order", { fail =>
    with Equal, type Order {
        Equal: { _ => /* succeed */ },
        Any: { unexpected => fail unexpected }
    }
}

test "cmp.Descending is cmp.Order", { fail =>
    with Equal, type Order {
        Equal: { _ => /* succeed */ },
        Any: { unexpected => fail unexpected }
    }
}

test "cmp.Order is only Equal, Ascending, Descending", { fail =>
    with Equal, type Order {
        Ascending: { _ => /* succeed */ },
        Equal: { _ => /* succeed */ },
        Descending: { _ => /* succeed */ }
        // type expression will fail
    }
}
