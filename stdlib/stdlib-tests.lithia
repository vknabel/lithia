module example

import tests {
    test
}
import strings
import os
import lists

test "booleans are cool", { fail =>
    with True, type Bool {
        True: { _ => },
        False: { _ =>
            fail "type switch not working for Bool"
        }
    }
}

test "strings.concat rocks", { fail =>
    let expected "Hello!"
    let actual strings.concat ["Hello", "!"]
    when expected != actual, fail actual
}

test "string comparisions", { fail =>
    when "" != "", fail "empty strings are not equal"
}

test "any in enums matches all types", { fail =>
    enum AnyEnum {
        Int
        Any
    }

    let isCorrect = with "should be any", type AnyEnum {
        Int: { _ => False },
        Any: { _ => True }
    }
    unless isCorrect, fail "should not be the case"
}

test "any allows to use fewer enum cases in type expression", { fail =>
    enum AnyEnum {
        Int
        String
        Any
    }

    let isCorrect = with "should be any", type AnyEnum {
        Int: { _ => False },
        Any: { _ => True }
    }
    unless isCorrect, fail "should not be the case"
}

test "when true succeeds", { fail =>
    let isTrue = when True, True
    with isTrue, type Bool {
        True: { true => "" },
        False: { false => fail "should be True" }
    }
}

test "int comparisions", { fail =>
    unless 1 == 1, fail "1 == 1"
    unless 0 == 0, fail "0 == 0"
    unless 0 != 42, fail "0 != 42"
    unless 13 != 42, fail "13 != 42"
    when 1 == 2, fail "!(1 == 2)"

    unless 1 + 1 == 2, fail "1 + 1 == 2"
    unless 3 * 2 + 1 == 7, fail "3 * 2 + 1 == 7"

    unless 42 - 1 < 42, fail "42 - 1 < 42"
    when 42 < 42, fail "42 < 42"

    unless 1 * 1 == 1, fail "1 * 1 == 1"

    func incr { i => i + 1 }
    unless (incr 1) == 2, fail "(incr 1) == 2"
}

test "strings.join", { fail =>
    when (strings.join ",", []) != "", fail "for empty list"
    when (strings.join ",", [1]) != "1", fail "string for one non-string"
    when (strings.join ",", ["1"]) != "1", fail "for one element"
    when (strings.join ",", ["1", "2"]) != "1,2", fail "for two elements"
    when (strings.join ",", ["1", "2", "3"]) != "1,2,3", fail "for three elements"
}

test "lists.replicate", { fail =>
    when (lists.replicate 0, 42) != [], fail "zero elements"
    // TODO: Bug in equal function
    // when (lists.replicate 1, 42) != [42], fail "one element"
    // when (lists.replicate 2, 42) != [42, 42], fail "two elements"
}

test "lists.flatMap", { fail =>
    func stringifiedReplicate { list =>
        let replications = lists.flatMap { i => lists.replicate i, i }, list
        strings.join "", replications
    }
    when (stringifiedReplicate []) != "", fail "empty"
    when (stringifiedReplicate [1]) != "1", fail "one replication"
    when (stringifiedReplicate [2]) != "22", fail "two replications"
}

func main { =>
    print "main called"
    os.exit 1
}

when tests.enabled, tests.runTests
unless tests.enabled, main
