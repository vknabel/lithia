module example

import tests
import strings

tests.test "booleans are cool", { fail =>
    with True, type Bool {
        True: { _ => },
        False: { _ =>
            fail "type switch not working for Bool"
        }
    }
}

tests.test "strings.concat rocks", { fail =>
    let expected "Hello!"
    let actual strings.concat ["Hello", "!"]
    when expected != actual, fail actual
}

tests.test "string comparisions", { fail =>
    when "" != "", fail "empty strings are not equal"
}

tests.test "any in enums matches all types", { fail =>
    enum AnyEnum {
        Int
        Any
    }

    let isCorrect = with "should be any", type AnyEnum {
        Int: { _ => False },
        Any: { _ => True }
    }
    unless isCorrect, fail "should not be the case"
}

tests.test "when true succeeds", { fail =>
    let isTrue = when True, True
    with isTrue, type Bool {
        True: { true => "" },
        False: { false => fail "should be True" }
    }
}

tests.test "int comparisions", { fail =>
    unless 1 == 1, fail "1 == 1"
    unless 0 == 0, fail "0 == 0"
    unless 0 != 42, fail "0 != 42"
    unless 13 != 42, fail "13 != 42"
    when 1 == 2, fail "!(1 == 2)"

    unless 1 + 1 == 2, fail "1 + 1 == 2"
    unless 3 * 2 + 1 == 7, fail "3 * 2 + 1 == 7"

    unless 42 - 1 < 42, fail "42 - 1 < 42"
    when 42 < 42, fail "42 < 42"

    unless 1 * 1 == 1, fail "1 * 1 == 1"

    func incr { i => i + 1 }
    unless (incr 1) == 2, fail "(incr 1) == 2"
}

func main { =>
    print "main called"
    osExit 1
}

when tests.enabled, tests.runTests
unless tests.enabled, main
