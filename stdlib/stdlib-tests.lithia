module example

import tests {
    test
}
import tests.tests_t
import os
import lists

test "any in enums matches all types", { fail =>
    enum AnyEnum {
        Int
        Any
    }

    let isCorrect = with "should be any", type AnyEnum {
        Int: { _ => False },
        Any: { _ => True }
    }
    unless isCorrect, fail "should not be the case"
}

test "any allows to use fewer enum cases in type expression", { fail =>
    enum AnyEnum {
        Int
        String
        Any
    }

    let isCorrect = with "should be any", type AnyEnum {
        Int: { _ => False },
        Any: { _ => True }
    }
    unless isCorrect, fail "should not be the case"
}

test "int comparisions", { fail =>
    unless 1 == 1, fail "1 == 1"
    unless 0 == 0, fail "0 == 0"
    unless 0 != 42, fail "0 != 42"
    unless 13 != 42, fail "13 != 42"
    when 1 == 2, fail "!(1 == 2)"

    unless 1 + 1 == 2, fail "1 + 1 == 2"
    unless 3 * 2 + 1 == 7, fail "3 * 2 + 1 == 7"

    unless 42 - 1 < 42, fail "42 - 1 < 42"
    when 42 < 42, fail "42 < 42"

    unless 1 * 1 == 1, fail "1 * 1 == 1"

    func incr { i => i + 1 }
    unless (incr 1) == 2, fail "(incr 1) == 2"
}

test "lists.replicate", { fail =>
    when (lists.replicate 0, 42) != [], fail "zero elements"
    when (lists.replicate 1, 42) != [42], fail "one element"
    when (lists.replicate 2, 42) != [42, 42], fail "two elements"
}

func main { =>
    print "main not implemented."
    print "to run tests, set LITHIA_TESTS=1"
    os.exit 1
}

when tests.enabled, tests.runTests
unless tests.enabled, main
