module docs

import markup
import lists
import strings
import docs.internal

func docsToMarkup { =>
    type TypeDocs {
        ModuleDocs: { d =>
            markup.group [
                markup.h1 d.name,
                markup.p (markup.inline [
                    markup.i "module",
                    d.docs
                ]),
                markup.ul (lists.map internal.moduleMemberDocsToMarkup, d.types),
                (lists.map docsToMarkup, d.types)
            ]
        },
        EnumDocs: { d =>
            let cases = with d.cases, type List {
                Cons: { cons =>
                    markup.group [
                        markup.h3 "Cases",
                        markup.ul (lists.map internal.enumCaseDocsToMarkup, d.cases)
                    ]
                },
                Nil: { _ => "" }
            }
            markup.group [
                markup.h2 d.name,
                markup.p (markup.inline [
                    markup.i "enum",
                    d.docs,
                ]),
                cases,
            ]
        },
        DataDocs: { d =>
            let properties = with d.fields, type List {
                Cons: { cons =>
                    markup.group [
                        markup.h3 "Properties",
                        markup.ul (lists.map internal.dataFieldDocsToMarkup, cons)
                    ]
                },
                Nil: { _ => "" }
            }
            markup.group [
                markup.h2 d.name,
                markup.p [
                    markup.inline [
                        markup.i "data",
                        d.docs,
                    ],
                ]
                properties,
            ]
        },
        FunctionDocs: { d =>
            let params = with d.params, type List {
                Cons: strings.join ", ",
                Nil: { _ => "" }
            }
            markup.group [
                markup.h2 d.name,
                markup.p [
                    markup.inline [
                        markup.i "func",
                        markup.pre (markup.inline [
                            d.name,
                            params,
                        ]),
                    ],
                ],
                (if d.docs == "", "", markup.p d.docs),
            ]
        },
        ConstantDocs: { d =>
            markup.group [
                markup.h2 d.name,
                markup.p [
                    markup.i "let",
                    d.docs,
                ]
            ]
        },
        ExternTypeDocs: { d =>
            let properties = with d.fields, type List {
                Cons: { cons =>
                    markup.group [
                        markup.h3 "Properties",
                        markup.ul (lists.map internal.dataFieldDocsToMarkup, cons)
                    ]
                },
                Nil: { _ => "" }
            }
            markup.group [
                markup.h2 d.name,
                markup.p [
                    markup.i "extern",
                    " ",
                    d.docs,
                ],
                properties,
            ]
        },
        ExternFunctionDocs: { d =>
            let params = with d.params, type List {
                Cons: strings.join ", ",
                Nil: { _ => "" }
            }
            markup.group [
                markup.h2 d.name,
                markup.p [
                    markup.inline [
                        markup.i "func",
                        markup.pre (markup.inline [
                            d.name,
                            params,
                        ]),
                    ],
                ],
                (if d.docs == "", "", markup.p d.docs),
            ]
            let params = with d.params, type List {
                Cons: strings.join ", ",
                Nil: { _ => "" }
            }
        },
        None: { _ => "" }
    }
}

