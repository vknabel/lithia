import markup
import strings

import docs

func moduleMemberDocsToMarkup { =>
    type docs.TypeDocs {
        ModuleDocs: { d =>
            markup.inline [
                markup.i "module",
                (markup.ref d.name, d.name)
            ]
        },
        EnumDocs: { d => 
            markup.inline [
                markup.i "enum",
                (markup.ref d.name, d.name)
            ]
        },
        DataDocs: { d => 
            markup.inline [
                markup.i "data",
                (markup.ref d.name, d.name)
            ]
        },
        FunctionDocs: { d =>
            markup.inline [
                markup.i "func",
                (markup.ref d.name, d.name),
                (strings.join ", ", d.params),
            ]
        },
        ConstantDocs: { d =>
            markup.inline [
                markup.i "let",
                (markup.ref d.name, d.name)
            ]
        },
        ExternTypeDocs: { d =>
            markup.inline [
                markup.i "extern",
                (markup.ref d.name, d.name)
            ]
        },
        ExternFunctionDocs: { d =>
            markup.inline [
                markup.i "extern",
                (markup.ref d.name, d.name),
                (strings.join ", ", d.params)
            ]
        },
        None: { _ => "" }
    }
}

func dataFieldDocsToMarkup { field =>
    let docsSuffix = if field.docs == "", "", strings.concat [" - ", field.docs]
    let fieldText = with field.params, type List {
        Cons: { params => 
            markup.inline [
                field.name,
                (strings.join ", ", params)
            ]
        },
        Nil: { _ => field.name },
    }
    markup.li [
        markup.pre fieldText,
        docsSuffix
    ]
}

func enumCaseDocsToMarkup { case =>
    let docsSuffix = if case.docs == "", "", strings.concat [" - ", case.docs]
    markup.li [
        (markup.ref case.name, case.type.name),
        docsSuffix
    ]
}
