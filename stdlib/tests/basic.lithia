package tests

import lists

let testCases = Variable Nil

data TestCase {
    title
    impl fail
}

data TestSummary {
    ok
    notOk
    failedTests
}

func detectIfTestsAreEnabled { env => 
    with (osEnv "LITHIA_TEST"), type Optional {
        Some: { _ => True },
        None: { _ => False }
    }
}

let enabled = detectIfTestsAreEnabled (osEnv "LITHIA_TEST")

func test { case, function =>
    testCases.accept (lists.append (TestCase case, function), testCases.current)
}

func runTests { testCases =>
    print "TAP version 13"
    print "1..".append (lists.count testCases.current)

    let summary = (lists.reduce runTestCase, (TestSummary 0, 0, Nil), testCases.current)

    with summary.failedTests, type List {
        Cons: { _ =>
            let testCount = summary.ok + summary.notOk
            print "FAILED tests"
            print (("Failed ".append summary.ok).append ("/".append testCount)).append " tests"
            osExit 1
        },
        Nil: { _ => }
    }
}

func runTestCase { summary, testCase =>
    let testNumber = summary.ok + summary.notOk + 1
    let failure = Variable None
    testCase.impl { message => failure.accept Some message }

    with failure.current, type Optional {
        Some: { some => 
            let testSummary = "not ok ".append testNumber
            print (testSummary.append " - ").append testCase.title
            print "  ---"
            print "  message: ".append some.value
            print "  severity: fail"
            TestSummary summary.ok, summary.notOk+1, (lists.append testNumber, summary.failedTests)
        },
        None: { _ => 
            let testSummary = "ok ".append testNumber
            print (testSummary.append " - ").append testCase.title
            TestSummary (summary.ok+1), summary.notOk, summary.failedTests
        }
    }
}
