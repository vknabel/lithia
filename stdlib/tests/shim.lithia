package tests

import strings
import rx

let latestTestNumber = rx.variable 0

let latestHarness = rx.variable []

data Harness {
    testCases
    reporter
}

data Reporter {
    version
    plan expected, optionalMessage
    report testPoint
    diagnostic string
    bailOut string
}

data TestPoint {
    ok
    count
    message
    directive
    details
}

data Summary {
    passes
    failures
}

func fail { message =>
    
}

func run { harness =>

}

func test { message, runner =>
    let testCase = latestTestNumber.current + 1
    latestTestNumber.observer.accept testCase

    when testCase == 1, print "TAP version 13"

    let errors = Variable []
    func fail { err =>
        errors.observer.accept (Cons err, errors.current)
        print err
    }
    runner fail

    with errors.current, type List {
        Cons: { errors =>
            print strings.concat ["not ok", testCase, " - ", message]
            print "  ---"
            print "  severity: fail"
            print "  errors:"

            with errors, listForEach { err =>
                print strings.concat ["    - ", err]
            }
        },
        Nil: { _ =>
            print strings.concat ["ok", testCase, " - ", message]
        }
    }
}

func listForEach { action, list =>
    with errors.current, type List {
        Cons: { errors =>
            action errors.head
            listForEach action, errors.tail
        },
        Nil: { _ => }
    }
}

func length { =>
    type List {
        Cons: { list =>
            1 + (length list.tail)
        },
        Nil: { _ => }
    }
}
