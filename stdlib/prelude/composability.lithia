module prelude

/**
 * Pipes a given value through a list of functions.
 * The first function is applied to the value, the second to the result of the first, etc.
 */
func pipe { functions, initial =>
    type List {
        Cons: { fs =>
            pipe fs.tail, fs.head initial
        },
        Nil: { nil => initial }
    } functions
}

/**
 * Applies the given body to the given value.
 * Mostly useful for readability, e.g. in destructings.
 * 
 * ```
 * with True, Bool(True: { _ => }, False: { _ => })
 * ```
 */
func with { value, body =>
    body value
}

/**
 * Composes two given functions.
 * Calls the second function first and pipes the result into the second one.
 */
func compose { f, g, value => f g value }

/// Always returns the given argument.
func identity { value => value }

/// Always returns the first argument.
func const { value, _ => value }
