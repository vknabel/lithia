module prelude

/**
 * Pipes a given value through a list of functions.
 * The first function is applied to the value, the second to the result of the first, etc.
 */
func pipe { functions, initial =>
    reduceList { into, next => next into }, initial, functions
}

/**
 * Applies the given body to the given value.
 * Mostly useful for readability, e.g. in destructings.
 * 
 * ```
 * with True, Bool(True: { _ => }, False: { _ => })
 * ```
 */
func with { value, body =>
    body value
}

func compose { f, g, value => f g value }

/**
 * Recursively walk a tree of nodes, calling a function on each node.
 * The given accumulator function merges each element into a new one for the next call.
 *
 * ```
 * reduceList { into, next => into + next.length }, 0, ["count", "chars"]
 * ```
 */
func reduceList { accumulator, initial =>
    type List {
        Cons: { cons =>
            let next = (accumulator initial, cons.head)
            reduceList accumulator, next, cons.tail
        },
        Nil: { nil => initial }
    }
}
