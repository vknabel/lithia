module optionals

import eq

/// Creates an equal function, that understands optionals and maybes for a given witness.
func equalFor { someWitness, lhs, rhs =>
  type Maybe {
    Some: { lsome =>
      type Maybe {
        Some: { rsome =>
          someWitness.equal lsome, rsome
        },
        None: { _ =>  False }
      } rhs
    },
    None: { _ =>
      type Maybe {
        Some: { _ => False },
        None: { _ => True }
      }
    },
  } optionals.from lhs
}

/// Creates an Equatable witness for Optionals on top of an existing witness.
func equatableFor { someWitness =>
  Equatable equalFor someWitness
}

// describe "optionals are equatable" { it =>
//   let neverEquatable = Equatable { _ => False }
//   let alwaysEquatable = Equatable { _ => True }
  
//   it "none and none always equal" { expect =>
//     expect (neverEquatable None, None)
//   }
  
//   it "some and none are never equal", { expect =>
//     expect (alwaysEquatable Some 1, None)
//     expect (alwaysEquatable None, Some 1)
//   }
  
//   it "some and some delegate equality to values" { expect =>
//     expect numbers, (Some 1), (Some 1)
//     expect eq.negated numbers, (Some 1), (Some 2)
//     expect eq.negated numbers, (Some 2), (Some 1)
//   }
// }
