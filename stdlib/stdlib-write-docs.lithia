import booleans
import cmp
import controls
import eq
import docs
import fs
import lists
import markdown
import markup
import optionals
import os
import prelude
import ranges
import rx
import results
import strings
import tests

func writeModuleMarkdownDocs { intoPath, mod =>
    let filePath = strings.concat [intoPath, "/", mod.name, ".md"]
    fs.writeString filePath, docs.docsToMarkdown mod
}

func overviewListToMarkdown { grouped, names =>
    let tableOfContents = with names, pipe [
        lists.map { name => 
            strings.concat [
                "- [", name, "]", "(./", name, ".md)"
            ]
        },
        strings.join "\n"
    ]
    strings.concat [
        "# ", grouped.title, "\n\n",
        grouped.summary, "\n\n",
        tableOfContents, "\n"
    ]
}

func writeOverview { intoPath, grouped, names =>
    let filePath = strings.concat [intoPath, "/README.md"]
    fs.writeString filePath, (overviewListToMarkdown grouped, names)
}

data GroupedModuleDocs {
    title
    summary
    modules
}

func main { grouped =>
    let modules = grouped.modules
    let docsFolder = optionals.orDefault "./stdlib", os.env "LITHIA_EXPORT_DOCS"
    let successes = rx.Variable 0
    let failures = rx.Variable 0

    lists.forEach modules, pipe [
        docs.inspect,
        writeModuleMarkdownDocs docsFolder,
        type results.Result {
            Success: { success =>
                successes.accept successes.current+1
            },
            Failure: { failure =>
                failures.accept failures.current+1
                print strings.concat [
                    "failed: ",
                    failure.error,
                ]
            }
        }
    ]

    let overviewResult = writeOverview docsFolder, grouped, (pipe [
        lists.map docs.inspect,
        lists.map { mod => mod.name }
    ], grouped.modules)
    with overviewResult, type results.Result {
        Success: { success =>
            successes.accept successes.current+1
        },
        Failure: { failure =>
            failures.accept failures.current+1
            print strings.concat [
                "failed: ",
                failure.error,
            ]
        },
    }

    print strings.concat [
        "Finished: ",
        successes.current,
        " successful / ",
        failures.current,
        " failed"
    ]
    when failures.current > 0, os.exit 1,
}

main (GroupedModuleDocs "Lithia Standard Library", 
    (strings.join "\n", [
    "There is one implicitly imported module for all files, called `prelude`.",
    "Other modules are not imported implicitly."
    ]),
    [
    booleans,
    cmp,
    controls,
    eq,
    docs,
    fs,
    lists,
    markdown,
    markup,
    optionals,
    os,
    prelude,
    ranges,
    rx,
    results,
    strings,
    tests,
])
