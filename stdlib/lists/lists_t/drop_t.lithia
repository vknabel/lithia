import lists
import strings
import tests { test }

test "lists.dropFirst", { fail =>
    unless (lists.dropFirst []) == [], fail "empty lists stay empty"
    unless (lists.dropFirst [0]) == [], fail "single elements will be empty"
    unless (lists.dropFirst [1, 2, 3]) == [2, 3], fail "head will be removed"
}

test "lists.dropN 0", { fail =>
    unless (lists.dropN 0, []) == [], fail "empty lists should always stay empty"
    unless (lists.dropN 0, [0, 1, 2, 3]) == [0, 1, 2, 3], fail "dropping 0 should keep all elements"
}

test "lists.dropN -", { fail =>
    unless (lists.dropN -2, []) == [], fail "empty lists should always stay empty"
    unless (lists.dropN -3, [0, 1, 2, 3]) == [0, 1, 2, 3], fail "negative counts be treated as 0"
}

test "lists.dropN +", { fail =>
    unless (lists.dropN 1, []) == [], fail "empty lists should always stay empty"
    unless (lists.dropN 2, [1]) == [], fail "dropping more elements than available should be empty"
    unless (lists.dropN 1, [1, 2, 3]) == [2, 3], fail "dropping 1 should only remove first"
}

test "lists.dropWhile", { fail =>
    func constTrue { _ => True }
    func constFalse { _ => False }
    func lessThan { n, i => i < n }

    unless (lists.dropWhile constFalse, []) == [], fail "dropping none when empty is empty"
    unless (lists.dropWhile constFalse, [1, 2, 3]) == [1, 2, 3], fail "dropping none keeps all"
    unless (lists.dropWhile constTrue, [1, 2, 3]) == [], fail "dropping all is empty"

    unless (lists.dropWhile lessThan 2, [1, 2, 3]) == [2, 3], fail "should drop to [2, 3]"
    unless (lists.dropWhile lessThan 2, [3, 2, 1]) == [3, 2, 1], fail "should drop to [3, 2, 1]"
}
